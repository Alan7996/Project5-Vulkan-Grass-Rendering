#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

// TODO: Add bindings to:
// 1. Store the input blades
// 2. Write out the culled blades
// 3. Write the total number of blades remaining

layout (set = 2, binding = 0) buffer BladesInput {
    Blade[] bladesInput;
};
layout (set = 2, binding = 1) buffer BladesCulled {
    Blade[] bladesCulled;
};

// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
// This is sort of an advanced feature so we've showed you what this buffer should look like

layout(set = 2, binding = 2) buffer NumBlades {
	  uint vertexCount;   // Write the number of blades remaining here
	  uint instanceCount; // = 1
	  uint firstVertex;   // = 0
	  uint firstInstance; // = 0
} numBlades;

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

#define M_TWO_PI 6.28318530718
#define M_PI 3.1415926535897932384626433832795
#define M_PI_HALF 1.57079632679

#define ANIM_SPEED 0.15

struct Wind {
    vec3 w_direction;
    float amplitude;
};

Wind windDirectional(vec3 v0) {
    Wind wind;

    wind.w_direction = vec3(1, 0, 1);
    wind.amplitude = 10.0f * abs(sin(M_TWO_PI * totalTime * 1.0f
                                    - wind.w_direction.x * sin(v0.x * ANIM_SPEED)
                                    - wind.w_direction.y * sin(v0.y * ANIM_SPEED)
                                    - wind.w_direction.z * sin(v0.z * ANIM_SPEED)));
    return wind;
}

Wind windHelicopter(vec3 v0) {
    Wind wind;
  
    vec3 w_origin = vec3(3.0f * sin(M_TWO_PI * totalTime * ANIM_SPEED), 
                        0.0, 
                        3.0f * cos(M_TWO_PI * totalTime * ANIM_SPEED));
    
    wind.w_direction = v0 - w_origin;

    float dist_amp = 100.0f / length(wind.w_direction);
    float wind_amp = 1.0f;
    float wavelength = 1.0f;
    float wavespeed = 1.0f;

    wind.amplitude = dist_amp + 
                    wind_amp * sin(M_TWO_PI * sqrt(wind.w_direction.x * wind.w_direction.x
                                                 + wind.w_direction.y * wind.w_direction.y
                                                 + wind.w_direction.z * wind.w_direction.z) / wavelength
                                     -  wavespeed / wavelength * totalTime);
    return wind;
}

void main() {
	// Reset the number of blades to 0
	if (gl_GlobalInvocationID.x == 0) {
		numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

    // TODO: Apply forces on every blade and update the vertices in the buffer
    Blade currBlade = bladesInput[gl_GlobalInvocationID.x];

    vec3 v0 = currBlade.v0.xyz;
    vec3 v1 = currBlade.v1.xyz;
    vec3 v2 = currBlade.v2.xyz;
    vec3 up = currBlade.up.xyz;

    // Gravity, assume t = 0
    vec3 g_D = vec3(0, -1, 0);
    float g_Mag = 9.83f;
    vec3 g_E = normalize(g_D) * g_Mag;
    vec3 g_F = 0.25 * length(g_E) * vec3(cos(currBlade.v0.w + M_PI_HALF), 0, sin(currBlade.v0.w + M_PI_HALF));
    vec3 g = g_E + g_F;

    // Recovery
    float eta = 0.0f;
    vec3 I_v2 = v0 + up * currBlade.v1.w;
    vec3 r = (I_v2 - v2) * currBlade.up.w * max(1.0f - eta, 0.1f);

    // Wind
    Wind wind;

    // Directional wind
    // wind = windDirectional(v0);
    // Helicopter wind
    wind = windHelicopter(v0);

    vec3 w_i = normalize(wind.w_direction) * wind.amplitude;
    
    // theta = f_d(w_i(v_0)) * f_r(h)
    float theta = (1.0f - abs(dot(normalize(w_i), normalize(v2 - v0)))) * dot(v2 - v0, up) / currBlade.v1.w;
    vec3 w = w_i * theta;

    // Total Force
    v2 += (g + r + w) * deltaTime;
    v2 = v2 - up * min(dot(up, v2 - v0), 0);

    float l_proj = length(v2 - v0 - up * dot(v2 - v0, up));
    v1 = v0 + currBlade.v1.w * up * max(1.0f - l_proj / currBlade.v1.w, 0.05f * max(l_proj / currBlade.v1.w, 1.0f));

    // n = 3
    float L = (2.0f * length(v2 - v0) + 2.0f * (length(v2 - v1) + length(v1 - v0))) / 4.0f;

    currBlade.v1.xyz = v0 + currBlade.v1.w / L * (v1 - v0);
    currBlade.v2.xyz = currBlade.v1.xyz + currBlade.v1.w / L * (v2 - v1);
    bladesInput[gl_GlobalInvocationID.x] = currBlade;

	// TODO: Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer
	// Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
	// You want to write the visible blades to the buffer without write conflicts between threads
    
    uint idx = atomicAdd(numBlades.vertexCount, 1);
    bladesCulled[idx] = currBlade;
}
